#!/bin/bash
#PBS -l nodes=1:ppn=1,vmem=8gb,walltime=2:00:00

# dependencies:
# python2.7 with numpy and nibabel
# FreeSurfer
# altas GCS data, which is automatically downloaded from figShare

set -e
set -x

####################################################################
####################################################################
# capture inputs from config
# TODO: capture input about which atlas to create. right now its  
# setup to just do all 10

INPUT_DIR=`jq -r '.fsin' config.json`
FS_VERSION='6p0'
atlasList=`jq -r '.atlas' config.json`
# no need to read in t1 for now...
# t1=`jq -r '.t1' config.json`

export atlasList 

####################################################################
####################################################################
# setup FREESURFER
# TODO: setup in a more general way. right now, this will work if the
# modules enviorment system being used

# note, make sure you use the verison of FreeSurfer that you 
# actually want...
if [[ -z ${FREESURFER_HOME} ]]
then
    module load freesurfer || echo "did not module load freesurfer"
fi

# make sure that FS will run with the licence
[[ -z "$FREESURFER_LICENSE" ]] && echo "Please set FREESURFER_LICENSE in .bashrc" && exit 1;
echo $FREESURFER_LICENSE > license.txt

####################################################################
####################################################################

workDir=''
useSingulairty='no'
dev="false"

# if singularity present, and the dev var is false, run this app via
# singulairty/Docker
if [[ $(which singularity)  ]] && [[ ${dev} = "false" ]] 
then 
    workDir=/
    useSingulairty="yes"
else
    # if singularity now present, we just local and want to keep it
    # like that
    workDir=${PWD}/
fi

export atlasBaseDir=${workDir}atlas_data
export scriptBaseDir=${PWD}/

# make a list from these options: 
# gordon333dil hcp-mmp-b shen schaefer{100,200,300,400,500,600,800}-yeo17 yeo17dil
# baldassano arslan_res150 arslan_res250

####################################################################
####################################################################

mkdir -p output

if [[ ${useSingulairty} = "yes" ]] 
then
   echo "data should be inside container"
else

	# fetch the data, if it does not already exist
	gcsMissing=0
	gcsFiles=''

	for ii in ${atlasList}
	do
	    for hemi in lh rh
	    do
		currGCS=${atlasBaseDir}/${ii}/${hemi}.${ii}_${FS_VERSION}.gcs
		if [[ ! -f ${currGCS} ]]
		then
		    gcsMissing=1
		    break
		fi
	    done
	done

	if [[ ${gcsMissing} -eq 1 ]]
	then
	    echo "downloading data from figshare"
	    wget -q -O figShareDL https://ndownloader.figshare.com/files/25079594
	    tar -vxf figShareDL
	    rm figShareDL
	    echo "finished downloading from figshare"
	else
	    echo "gcs data already present"
	fi

fi

####################################################################
####################################################################
# go into the folder where we also want output and setup notes file!

touch log.txt

# run it
cmd="${scriptBaseDir}/src/maTT2_applyGCS.sh \
	-d ${INPUT_DIR} \
	-o output \
	-f ${FS_VERSION}"
if [[ ${useSingulairty} = "yes" ]] 
then
    export SINGULARITYENV_atlasList=${atlasList}
    export SINGULARITYENV_atlasBaseDir=${atlasBaseDir}
    export SINGULARITYENV_scriptBaseDir=${scriptBaseDir}
    #singularity exec --writable -e docker://faskowit/app-multiatlastt:0.0.2 bash -c "echo $FREESURFER_LICENSE > /usr/local/freesurfer/license.txt && $cmd"
    singularity exec -e -B `pwd`/license.txt:/usr/local/freesurfer/license.txt docker://faskowit/app-multiatlastt:0.0.8 $cmd
else
    eval $cmd | tee -a log.txt
fi

####################################################################
####################################################################
# output handling

mkdir -p parc-vol mask
for atlas in $atlasList
do
    # parc-vol
    cp output/${atlas}/${atlas}_remap.nii.gz parc-vol/parc.nii.gz
    cp output/${atlas}/${atlas}_remap.nii.gz_remapKey.txt parc-vol/key.txt
    cp output/${atlas}/${atlas}_remap.nii.gz_label.json parc-vol/label.json
    
    # mask
    cp output/mask.nii.gz mask/mask.nii.gz
done
	
echo "{\"tags\": [\"${atlas}\" ]}" > product.json

echo "finished maTT2 with status: $?"






















